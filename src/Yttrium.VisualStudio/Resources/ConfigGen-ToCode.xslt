<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt"
    xmlns:y="urn:yttrium/vs/config"
    xmlns:fn="urn:eo-util"
    exclude-result-prefixes="msxsl y fn">

    <xsl:output method="text" indent="no" />

    <xsl:param name="ToolVersion" />
    <xsl:param name="FileName" />
    <xsl:param name="FullFileName" />
    <xsl:param name="Namespace" />


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ y:configuration/
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsl:template match=" y:configuration ">
        <xsl:text>// autogenerated: do NOT edit manually
using Platinum.Configuration;
using System;
using System.Configuration;

namespace </xsl:text>
        <xsl:value-of select=" $Namespace " />
        <xsl:text>
{</xsl:text>

        <xsl:apply-templates select=" y:section " mode="y:class" />

        <xsl:if test=" .//y:item | .//y:element ">
            <xsl:text>
</xsl:text>
        </xsl:if>

        <xsl:apply-templates select=" .//y:item | .//y:element " mode="y:class" />

        <xsl:text>
}

/* eof */
</xsl:text>
    </xsl:template>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ y:class/
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsl:template match=" * " mode="y:class">
        <!-- Lead -->
        <xsl:text>

</xsl:text>

        <!-- Decl -->
        <xsl:text>    public partial class </xsl:text>
        <xsl:value-of select=" @type " />
        <xsl:text> : ConfigurationElement</xsl:text>
        <xsl:text>
    {</xsl:text>

        <!-- Properties -->
        <xsl:apply-templates select=" * " mode="y:property" />

        <xsl:text>
    }</xsl:text>
    </xsl:template>

    <xsl:template match=" y:section " mode="y:class">
        <!-- Lead -->
        <xsl:text>
</xsl:text>

        <!-- Decl -->
        <xsl:text>    public partial class </xsl:text>
        <xsl:value-of select=" @type " />
        <xsl:text> : ConfigurationSection</xsl:text>
        <xsl:text>
    {</xsl:text>

        <!-- Singleton -->
        <xsl:text>
</xsl:text>
        <xsl:text>        public static </xsl:text>
        <xsl:value-of select=" @type " />
        <xsl:text> Current</xsl:text>

        <xsl:text>
</xsl:text>
        <xsl:text>        {</xsl:text>

        <xsl:text>
</xsl:text>
        <xsl:text>            get { return AppConfiguration.SectionGet&lt;</xsl:text>
        <xsl:value-of select=" @type " />
        <xsl:text>&gt;( "</xsl:text>
        <xsl:value-of select=" @name " />
        <xsl:text>" ); }</xsl:text>

        <xsl:text>
</xsl:text>
        <xsl:text>        }</xsl:text>
        <xsl:text>

</xsl:text>

        <!-- Properties -->
        <xsl:apply-templates select=" * " mode="y:property" />
        <xsl:text>
    }</xsl:text>
    </xsl:template>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ y:property/
    ~ For all properties, and a specialized generation for the repeater.
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsl:template match=" * " mode="y:property">
        <xsl:text>
</xsl:text>
        <xsl:if test=" position() > 1 ">
            <xsl:text>
</xsl:text>
        </xsl:if>

        <!-- ConfigurationProperty -->
        <xsl:text>        [ConfigurationProperty( "</xsl:text>
        <xsl:value-of select=" @name " />
        <xsl:text>"</xsl:text>

        <xsl:if test=" @key = 'true' ">
            <xsl:text>, IsKey = true, IsRequired = true</xsl:text>
        </xsl:if>

        <xsl:if test=" not( @optional = 'true' ) and not( @key = 'true' ) ">
            <xsl:text>, IsRequired = true</xsl:text>
        </xsl:if>

        <xsl:if test=" @default ">
            <xsl:text>, DefaultValue = </xsl:text>
            <xsl:apply-templates select=" . " mode="y:default" />
        </xsl:if>

        <xsl:text> )]</xsl:text>

        <!-- Validators -->
        <xsl:apply-templates select=" * " mode="y:validator" />

        <!-- Definition -->
        <xsl:text>
</xsl:text>
        <xsl:text>        public </xsl:text>
        <xsl:apply-templates select=" . " mode="y:type" />
        <xsl:text> </xsl:text>
        <xsl:choose>
            <xsl:when test=" @as ">
                <xsl:value-of select=" @as " />
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="y:capitalize">
                    <xsl:with-param name="value" select=" @name " />
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>
        {</xsl:text>

        <xsl:text>
            get { return (</xsl:text>
        <xsl:apply-templates select=" . " mode="y:type" />
        <xsl:text>) this[ "</xsl:text>
        <xsl:value-of select=" @name "/>
        <xsl:text>" ]; }</xsl:text>

        <xsl:text>
            set { this[ "</xsl:text>
        <xsl:value-of select=" @name "/>
        <xsl:text>" ] = value; }</xsl:text>

        <xsl:text>
        }</xsl:text>
    </xsl:template>


    <xsl:template match=" y:repeater " mode="y:property">
        <xsl:text>
</xsl:text>
        <xsl:if test=" position() > 1 ">
            <xsl:text>
</xsl:text>
        </xsl:if>

        <!-- ConfigurationProperty -->
        <xsl:text>        [ConfigurationProperty( "</xsl:text>
        <xsl:value-of select=" @name " />
        <xsl:text>", IsDefaultCollection = false )]</xsl:text>

        <!-- ConfigurationCollection -->
        <xsl:text>
</xsl:text>
        <xsl:text>        [ConfigurationCollection( typeof( </xsl:text>
        <xsl:value-of select=" y:item/@type " />
        <xsl:text> ), AddItemName = "add" )]</xsl:text>

        <!-- Type -->
        <xsl:text>
</xsl:text>
        <xsl:text>        public ConfigurationElementCollection&lt;</xsl:text>
        <xsl:value-of select=" y:item/@type " />
        <xsl:text>&gt; </xsl:text>
        <xsl:choose>
            <xsl:when test=" @as ">
                <xsl:value-of select=" @as " />
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="y:capitalize">
                    <xsl:with-param name="value" select=" @name " />
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>


        <!-- Open get/setter -->
        <xsl:text>
</xsl:text>
        <xsl:text>        {</xsl:text>

        <!-- Getter -->
        <xsl:text>
</xsl:text>
        <xsl:text>            get { return (ConfigurationElementCollection&lt;</xsl:text>
        <xsl:value-of select=" y:item/@type " />
        <xsl:text>&gt;) base[ "</xsl:text>
        <xsl:value-of select=" @name " />
        <xsl:text>" ]; }</xsl:text>

        <!-- Close -->
        <xsl:text>
</xsl:text>
        <xsl:text>        }</xsl:text>
    </xsl:template>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ y:type/
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsl:template match=" * " mode="y:type">
        <xsl:choose>
            <xsl:when test=" local-name(.) = 'string' ">
                <xsl:text>string</xsl:text>
            </xsl:when>

            <xsl:when test=" local-name(.) = 'bool' ">
                <xsl:text>bool</xsl:text>

                <xsl:if test=" @optional = 'true' and not( @default ) ">
                    <xsl:text>?</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test=" local-name(.) = 'int' ">
                <xsl:text>int</xsl:text>

                <xsl:if test=" @optional = 'true' and not( @default ) ">
                    <xsl:text>?</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test=" local-name(.) = 'enum' ">
                <xsl:value-of select=" @type " />

                <xsl:if test=" @optional = 'true' and not( @default ) ">
                    <xsl:text>?</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test=" local-name(.) = 'element' ">
                <xsl:value-of select=" @type " />
            </xsl:when>

            <xsl:otherwise>
                <xsl:text>UNSUPPORTED /* </xsl:text>
                <xsl:value-of select=" local-name(.) " />
                <xsl:text> */</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ y:default/
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsl:template match=" * " mode="y:default">
        <xsl:value-of select=" @default " />
    </xsl:template>

    <xsl:template match=" y:enum | y:string " mode="y:default">
        <xsl:text>"</xsl:text>
        <xsl:value-of select=" @default " />
        <xsl:text>"</xsl:text>
    </xsl:template>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ y:validator/
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsl:template match=" * " mode="y:validator" />

    <xsl:template match=" y:regex " mode="y:validator">
        <xsl:text>
</xsl:text>
        <xsl:text>        [RegexStringValidator( @"</xsl:text>
        <xsl:value-of select=" @pattern " />
        <xsl:text>" )]</xsl:text>
    </xsl:template>



    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ y:capitalize()
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsl:variable name="lcase" select=" 'abcdefghijklmnopqrstuvwxyz' " />
    <xsl:variable name="ucase" select=" 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' " />

    <xsl:template name="y:capitalize">
        <xsl:param name="value" />

        <xsl:value-of select=" translate( substring( $value, 1, 1 ), $lcase, $ucase ) " />
        <xsl:value-of select=" substring( $value, 2 ) " />
    </xsl:template>

</xsl:stylesheet>
